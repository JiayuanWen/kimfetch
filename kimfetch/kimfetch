#!/bin/bash

# *** Kimfetch ***
# Version 1.1 
# By Jiayuan "Weldon" Wen
# Licence: CC BY-NC 4.0, more info: https://creativecommons.org/licenses/by-nc/4.0/?ref=chooser-v1

# Hardcoded system information script for Red Star OS 2.0 & 3.0.
# Normal neofetch or screenfetch script won't execute on Red Star OS due to multiple essencial commands, parameters, and the ability to define functions in script being missing or removed from the distro, so I wrote this script to work around these limitations.

# For devs:
# Since Red Star OS is missing the ability to implement functions in Shell scripts, please avoid use of functions when modifying this script. Use variables instead
# Red Star OS is developed by the DPRK, it is highly adviced not to install the system on your machine due to privacy risk and for personal safity. If you must use the OS, please install in a virtual environment with no access to internet. 

# Flags
while getopts c:hf flag
do
	case "${flag}" in
		c) color_code=${OPTARG};;
		f) default_color=true;;
		h) display_help=true;;
	esac
done

# Display help when user state -h flag
if [[ -n "$display_help" ]] && [ "$display_help" == true ]; then
	echo "Flags:"
    echo "  -c    Set color scheme (1: Red, 2: Green). Usage: kimfetch -c [1|2]"
	echo "  -f    Cancel set color theme and use default. Usage: kimfetch -f"
    echo "  -h    Display help. Usage: kimfetch -h"
	echo ""
	echo "For more detail, visit https://github.com/JiayuanWen/kimfetch/wiki/Sctript-Functions"
	
	exit 0;
fi

# === OS info ===
# Credit: kvivek & Peter Mortensen from StackOverflow
# Link: https://stackoverflow.com/a/26988390
OS=`uname -s`
REV=`uname -r`
MACH=`uname -m`
if [ "${OS}" = "SunOS" ] ; then
    OS=Solaris
    ARCH=`uname -p`
    OSSTR="${OS} ${REV}(${ARCH} `uname -v`)"
elif [ "${OS}" = "AIX" ] ; then
    OSSTR="${OS} `oslevel` (`oslevel -r`)"
elif [ "${OS}" = "Linux" ] ; then
    KERNEL=`uname -r`
    if [ -f /etc/redhat-release ] ; then
        DIST='RedHat'
        PSUEDONAME=`cat /etc/redhat-release | sed s/.*\(// | sed s/\)//`
        REV=`cat /etc/redhat-release | sed s/.*release\ // | sed s/\ .*//`
    elif [ -f /etc/SuSE-release ] ; then
        DIST=`cat /etc/SuSE-release | tr "\n" ' '| sed s/VERSION.*//`
        REV=`cat /etc/SuSE-release | tr "\n" ' ' | sed s/.*=\ //`
    elif [ -f /etc/mandrake-release ] ; then
        DIST='Mandrake'
        PSUEDONAME=`cat /etc/mandrake-release | sed s/.*\(// | sed s/\)//`
        REV=`cat /etc/mandrake-release | sed s/.*release\ // | sed s/\ .*//`
    elif [ -f /etc/debian_version ] ; then
        DIST="Debian `cat /etc/debian_version`"
        REV=""
    fi
    if [ -f /etc/UnitedLinux-release ] ; then
        DIST="${DIST}[`cat /etc/UnitedLinux-release | tr "\n" ' ' | sed s/VERSION.*//`]"
    fi
	# Show OS+DIST if PSUEDONAME not provided, otherwise show PSUDONAME.
	# MACH show on both cases
	#OSSTR="${OS} ${DIST} ${PSUEDONAME} ${MACH}"
	if [ -z "$PSUEDONAME" ] ; then
		OSSTR="${OS} ${DIST} ${MACH}"
	else
		OSSTR="${PSUEDONAME} ${MACH}"
	fi
fi
OS=${OSSTR}

# === System board name ===
if [ -e "/sys/devices/virtual/dmi/id/board_vendor" ]; then
	BOARD=""
	BOARD+=`cat /sys/devices/virtual/dmi/id/board_vendor`" "`cat /sys/devices/virtual/dmi/id/board_name`" "`cat /sys/devices/virtual/dmi/id/board_version`
else
	BOARD="Inapplicable"
fi
# === Kernel name ===
KERNEL=`uname -r`

# === Shell type & version ===
PROFILE_SHELL=""
PROFILE_SHELL_VER=""
if test -n "$ZSH_VERSION"; then
  PROFILE_SHELL=zsh
  PROFILE_SHELL_VER="$ZSH_VERSION"
elif test -n "$BASH_VERSION"; then
  PROFILE_SHELL=bash
  PROFILE_SHELL_VER="$BASH_VERSION"
elif test -n "$KSH_VERSION"; then
  PROFILE_SHELL=ksh
  PROFILE_SHELL_VER="$KSH_VERSION"
elif test -n "$FCEDIT"; then
  PROFILE_SHELL=ksh
  PROFILE_SHELL_VER="$FCEDIT"
elif test -n "$PS3"; then
  PROFILE_SHELL=unknown
  PROFILE_SHELL_VER="$PS3"
else
  PROFILE_SHELL=sh
  PROFILE_SHELL_VER="$($SHELL --version)"
fi

# === Screen resolution ===
SCREEN=""
FPS=""
if command -v "xrandr" > /dev/null; then
#if ! command -v "xrandr" > /dev/null; then #For debug use

	# xrandr gives un-suppressible warning messages,
	# Load everything into a file with &>, then grep what's needed.
	MONITOR=$(mktemp)
	xrandr &> $MONITOR
	#echo "1920x1080 0.0*" &> $MONITOR #For debug use
	
	# tr shrink all spaces to one to remove unnecessary spaces
	# sed to remove "*"
	MONITOR=$(cat $MONITOR | fgrep "*" | tr -s ' ' | sed 's/\*//') 
	
	# sed regex to separate resolution and refresh rate
	# Note to self: for regex quantifier in sed(*,?,+), escape with "\"
	SCREEN="$(echo $MONITOR | sed 's/\ [0-9]\?[0-9]\?[0-9]\.[0-9][0-9]\?[0-9]\?//')" 
	FPS="$(echo $MONITOR | sed 's/[0-9]\?[0-9]\?[0-9]\?[0-9]x[0-9][0-9]\?[0-9]\?[0-9]\?\ //')Hz"
	
	# If xrandr can't read refresh rate, leave it blank
	if [ "$FPS" == "0.0Hz" ]; then
		FPS=""
	fi
else
	SCREEN="Inapplicable"
fi


# === Desktop Environment ===
# We know Red Star OS 2.0 and 3.0 use KDE as DE according to https://archiveos.org/redstar/
if command -v "konsole" > /dev/null; then
	DE=$(konsole --version | grep "KDE")
	DE=${DE//[:]/ }
	DE=$(echo $DE) # Eliminate unnecessary spaces
else
	DE="Inapplicable"
fi

# === Window Manager ===
WM=""
if [ -z "$XDG_CURRENT_DESKTOP" ]; then
    WM="Unknown"
else
    WM="$XDG_CURRENT_DESKTOP"
fi

# === Terminal program ===
# Credit: Stéphane Chazelas from StackOverflow
# Link: https://unix.stackexchange.com/a/264353
TER=$(ps -o comm= -p "$(($(ps -o ppid= -p "$(($(ps -o sid= -p "$$")))")))")

# === CPU name ===
CPU=$(cat /proc/cpuinfo | grep "model name" | head -1)
CPU="$(echo ${CPU#*:})"

# === GPU name ===
if [ -d "/proc/bus/pci" ]; then
	GPU=$(lspci | grep "VGA" | head -1)
	GPU="$(echo ${GPU#*:*:})"
else
	GPU="Inapplicable"
fi

# === Memory usage ===
MEM_USED=$(free -m | awk 'FNR == 2 {print $3}')
MEM_TOTAL=$(free -m | awk 'FNR == 2 {print $2}')
MEM="${MEM_USED}MB / ${MEM_TOTAL}MB"

# === Storage ===
STO_USED=$(df -h / | awk 'FNR == 2 {print $3}')
STO_TOTAL=$(df -h / | awk 'FNR == 2 {print $2}')
STO_PERC=$(df -h / | awk 'FNR == 2 {print $5}' | tr -d \%); 
#STO_PERC=$(df -h / | awk 'FNR == 2 {print $5}');
#STO=$(printf "%s" "${STO_USED}B / ${STO_TOTAL}B ($(echo ${STO_PERC}))")
STO=$(printf "%s" "${STO_USED}B / ${STO_TOTAL}B")

# === Color ===
COLOR=""
CFG_DIR="$HOME/.config/kimfetch"
# Check if config folder exist
if [ -d "$CFG_DIR" ]; then
	true
	#echo "Config folder exist"
else
	if [ "$EUID" -ne 0 ]; then
		mkdir "$CFG_DIR"
	fi
	#echo "Config folder not exist"
fi
# If user set a color with the -c flag
if [[ -n "$color_code" ]]; then
	# Make sure user is not running as root
	if [ "$EUID" -eq 0 ]; then
		echo "Error: Must run as non-root"
		exit 1
	fi
	# Check if user set valid value
	if [ "$color_code" == "1" ] || [ "$color_code" == "2" ]; then
		if [ ! -f "$HOME/.config/kimfetch/color" ]; then
			touch "$HOME/.config/kimfetch/color"
		fi
	
		echo "$color_code" > "$HOME/.config/kimfetch/color"
	else
		echo "Invalid color option"
		exit 0
	fi
fi
# Check if pre-existing color is set or not. Use default if not.
if [ ! -e "$HOME/.config/kimfetch/color" ]; then
	# Default:
	# Red for Red Star OS 2.0
	# Green for Red Star OS 3.0
	if [[ ${OSSTR} == *"2"* ]]; then
		COLOR="\e[1;31m"
	elif [[ ${OSSTR} == *"3"* ]]; then
		COLOR="\e[32m"
	else
		COLOR="\e[1;31m"
	fi
else
	if [ "$(cat $HOME/.config/kimfetch/color)" == "1" ]; then
		COLOR="\e[1;31m"
	fi
	if [ "$(cat $HOME/.config/kimfetch/color)" == "2" ]; then
		COLOR="\e[32m"
	fi
fi
# Check if user cancelled color with -f flag
if [[ -n "$default_color" ]] && [ "$default_color" == true ]; then
	# Make sure user is not running as root
	if [ "$EUID" -eq 0 ]; then
		echo "Error: Must run as non-root"
		exit 1
	fi
	if [ ! -e "$HOME/.config/kimfetch/color" ] && [ ! -d "$HOME/.config/kimfetch" ]; then
		echo "Color already on default"
	fi
	rm "$HOME/.config/kimfetch"
	rmdir "$HOME/.config/kimfetch"
fi

# === Header ===
# "Username@Hostname" as displayed on each prompt
SESSION="${COLOR}$(whoami)\e[0m@${COLOR}$(hostname)\e[0m";

# === Separation line below header ===
SEP=""
LOOP="${#SESSION}"
LOOP=$(($LOOP-16-10)) # Do not count color codes. Remove two "\e[1;3Xm" and two "\e[0m"
SEP=$(printf "%0.s-" $(seq 1 $LOOP))

printf "\
$COLOR                      ..                      \e[0m $(printf $SESSION)
$COLOR                    .oK0l                     \e[0m $(printf -- $SEP) 
$COLOR                   :0KKKKd.                   \e[0m $(printf "${COLOR}OS\e[0m: $OS")
$COLOR                 .xKO0KKKKd                   \e[0m $(printf "${COLOR}Host\e[0m: $BOARD")
$COLOR                ,Od' .d0000l                  \e[0m $(printf "${COLOR}Kernel\e[0m: $KERNEL")
$COLOR               .c;.   .'''...           ..'.  \e[0m $(printf "${COLOR}Shell\e[0m: $PROFILE_SHELL $PROFILE_SHELL_VER")
$COLOR  .,:cloddxxxkkkkOOOOkkkkkkkkxxxxxxxxxkkkx:   \e[0m $(printf "${COLOR}Resolution\e[0m: $SCREEN $FPS")
$COLOR  ;kOOOOOOOkxOkc'...',;;;;,,,'',;;:cllc:,.    \e[0m $(printf "${COLOR}DE\e[0m: $DE")
$COLOR   .okkkkd,.lko  .......',;:cllc:;,,'''''.    \e[0m $(printf "${COLOR}WM\e[0m: $WM")
$COLOR     .cdo. :xd' cd:.  ..';'',,,'',,;;;,'.     \e[0m $(printf "${COLOR}Terminal\e[0m: $TER")
$COLOR        . .ddl.;doooc'..;oc;'..';::;,'.       \e[0m $(printf "${COLOR}CPU\e[0m: $CPU")
$COLOR          coo;.oooolllllllcccc:'.  .          \e[0m $(printf "${COLOR}GPU\e[0m: $GPU")
$COLOR         .ool''lllllccccccc:::::;.            \e[0m $(printf "${COLOR}Memory\e[0m: $MEM")
$COLOR         ;lll. .':cccc:::::::;;;;'            \e[0m $(printf "${COLOR}Storage\e[0m: $STO")
$COLOR         :lcc:'',..';::::;;;;;;;,,.           \e[0m 
$COLOR         :cccc::::;...';;;;;,,,,,,.           \e[0m \e[30m███\e[31m███\e[32m███\e[33m███\e[34m███\e[35m███\e[36m███\e[37m███
$COLOR         ,::::::;;;,'.  ..',,,,'''.           \e[0m \e[1;30m███\e[1;31m███\e[1;32m███\e[1;33m███\e[1;34m███\e[1;35m███\e[1;36m███\e[1;37m███
$COLOR          ........          ......            \e[0m
"
